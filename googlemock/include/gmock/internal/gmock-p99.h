/* This may look like nonsense, but it really is -*- mode: C -*-              */
/*                                                                            */
/* Except for parts copied from previous work and as explicitly stated below, */
/* the authors and copyright holders for this work are as follows:            */
/* (C) copyright  2010-2012 Jens Gustedt, INRIA, France                       */
/* (C) copyright  2012 William Morris                                         */
/*                                                                            */
/* This file is free software; it is part of the P99 project.                 */
/* You can redistribute it and/or modify it under the terms of the QPL as     */
/* given in the file LICENSE. It is distributed without any warranty;         */
/* without even the implied warranty of merchantability or fitness for a      */
/* particular purpose.                                                        */

// P99 code ported into Google Mock
// This is a temporry file, until we figure out exactly how to use P99 in 
//  Google Mock, considering licensing etc.
// 
// The macros actually used in Google Mock are:
//   P99_NARG
//   P99_SELS

#ifndef GMOCK_P99_H
#define GMOCK_P99_H

//
// Taken from p99_paste.h
//


/**
 ** @brief Paste two token sequences at their junction.
 **
 ** This macro does the paste operation first, and then an evaluation
 ** of the result. Thus
 ** @code
 ** #define B(x) toto(x)
 ** P99_CAT2(A, B(6));
 ** @endcode
 ** will result in
 ** @code
 ** AB(6);
 ** @endcode
 ** and not in
 ** @code
 ** Atoto(6)
 ** @endcode
 **/
#define P99_CAT2(_1, _2) _1 ## _2

/**
 ** @brief Paste two token sequences at their junction.
 **
 ** This macro does the evaluation of the arguments first and then
 ** proceeds with the concatenation
 ** of the results. Thus
 ** @code
 ** #define B(x) toto(x)
 ** P99_CAT2(A, B(6));
 ** @endcode
 ** will result in
 ** @code
 ** Atoto(6)
 ** @endcode
 ** and not in
 ** @code
 ** AB(6);
 ** @endcode
 **/
#define P99_PASTE2(_1, _2) P99_CAT2(_1, _2)
#define P99_PASTE3(_1,  _2, _3)                                \
  P99_PASTE2(P99_PASTE2(_1, _2), _3)
#define P99_PASTE4(_1,  _2, _3, _4)                            \
  P99_PASTE2(P99_PASTE3(_1, _2, _3), _4)
#define P99_PASTE5(_1,  _2, _3, _4, _5)                        \
  P99_PASTE2(P99_PASTE4(_1, _2, _3, _4), _5)
#define P99_PASTE6(_1,  _2, _3, _4, _5, _6)                    \
  P99_PASTE2(P99_PASTE5(_1, _2, _3, _4, _5), _6)

//
// Taken from p99_generated.h
// In Google Mock, this should be generated by pump.py. Didn't do it yet.
//

#define P00_ARG(                                               \
 _1, _2, _3, _4, _5, _6, _7, _8,                               \
 _9, _10, _11, _12, _13, _14, _15, _16,                        \
 _17, _18, _19, _20, _21, _22, _23, _24,                       \
 _25, _26, _27, _28, _29, _30, _31, _32,                       \
 _33, _34, _35, _36, _37, _38, _39, _40,                       \
 _41, _42, _43, _44, _45, _46, _47, _48,                       \
 _49, _50, _51, _52, _53, _54, _55, _56,                       \
 _57, _58, _59, _60, _61, _62, _63, _64,                       \
 _65, _66, _67, _68, _69, _70, _71, _72,                       \
 _73, _74, _75, _76, _77, _78, _79, _80,                       \
 _81, _82, _83, _84, _85, _86, _87, _88,                       \
 _89, _90, _91, _92, _93, _94, _95, _96,                       \
 _97, _98, _99, _100, _101, _102, _103, _104,                  \
 _105, _106, _107, _108, _109, _110, _111, _112,               \
 _113, _114, _115, _116, _117, _118, _119, _120,               \
 _121, _122, _123, _124, _125, _126, _127, _128,               \
 _129, _130, _131, _132, _133, _134, _135, _136,               \
 _137, _138, _139, _140, _141, _142, _143, _144,               \
 _145, _146, _147, _148, _149, _150, _151, _152,               \
 _153, _154, _155, _156, _157, _158, _159,                     \
 ...) _159

#define P00_NARG_1(...) P00_ARG(__VA_ARGS__,  158, 157, 156, 155, 154, 153, 152, \
 151, 150, 149, 148, 147, 146, 145, 144,                                         \
 143, 142, 141, 140, 139, 138, 137, 136,                                         \
 135, 134, 133, 132, 131, 130, 129, 128,                                         \
 127, 126, 125, 124, 123, 122, 121, 120,                                         \
 119, 118, 117, 116, 115, 114, 113, 112,                                         \
 111, 110, 109, 108, 107, 106, 105, 104,                                         \
 103, 102, 101, 100, 99, 98, 97, 96,                                             \
 95, 94, 93, 92, 91, 90, 89, 88,                                                 \
 87, 86, 85, 84, 83, 82, 81, 80,                                                 \
 79, 78, 77, 76, 75, 74, 73, 72,                                                 \
 71, 70, 69, 68, 67, 66, 65, 64,                                                 \
 63, 62, 61, 60, 59, 58, 57, 56,                                                 \
 55, 54, 53, 52, 51, 50, 49, 48,                                                 \
 47, 46, 45, 44, 43, 42, 41, 40,                                                 \
 39, 38, 37, 36, 35, 34, 33, 32,                                                 \
 31, 30, 29, 28, 27, 26, 25, 24,                                                 \
 23, 22, 21, 20, 19, 18, 17, 16,                                                 \
 15, 14, 13, 12, 11, 10, 9, 8,                                                   \
 7, 6, 5, 4, 3, 2, 1, 0,)

#define P00_NARG_2(...) P00_ARG(__VA_ARGS__,  79, P00_INV(2), 78, P00_INV(2), 77, P00_INV(2), 76, \
 P00_INV(2), 75, P00_INV(2), 74, P00_INV(2), 73, P00_INV(2), 72,                                  \
 P00_INV(2), 71, P00_INV(2), 70, P00_INV(2), 69, P00_INV(2), 68,                                  \
 P00_INV(2), 67, P00_INV(2), 66, P00_INV(2), 65, P00_INV(2), 64,                                  \
 P00_INV(2), 63, P00_INV(2), 62, P00_INV(2), 61, P00_INV(2), 60,                                  \
 P00_INV(2), 59, P00_INV(2), 58, P00_INV(2), 57, P00_INV(2), 56,                                  \
 P00_INV(2), 55, P00_INV(2), 54, P00_INV(2), 53, P00_INV(2), 52,                                  \
 P00_INV(2), 51, P00_INV(2), 50, P00_INV(2), 49, P00_INV(2), 48,                                  \
 P00_INV(2), 47, P00_INV(2), 46, P00_INV(2), 45, P00_INV(2), 44,                                  \
 P00_INV(2), 43, P00_INV(2), 42, P00_INV(2), 41, P00_INV(2), 40,                                  \
 P00_INV(2), 39, P00_INV(2), 38, P00_INV(2), 37, P00_INV(2), 36,                                  \
 P00_INV(2), 35, P00_INV(2), 34, P00_INV(2), 33, P00_INV(2), 32,                                  \
 P00_INV(2), 31, P00_INV(2), 30, P00_INV(2), 29, P00_INV(2), 28,                                  \
 P00_INV(2), 27, P00_INV(2), 26, P00_INV(2), 25, P00_INV(2), 24,                                  \
 P00_INV(2), 23, P00_INV(2), 22, P00_INV(2), 21, P00_INV(2), 20,                                  \
 P00_INV(2), 19, P00_INV(2), 18, P00_INV(2), 17, P00_INV(2), 16,                                  \
 P00_INV(2), 15, P00_INV(2), 14, P00_INV(2), 13, P00_INV(2), 12,                                  \
 P00_INV(2), 11, P00_INV(2), 10, P00_INV(2), 9, P00_INV(2), 8,                                    \
 P00_INV(2), 7, P00_INV(2), 6, P00_INV(2), 5, P00_INV(2), 4,                                      \
 P00_INV(2), 3, P00_INV(2), 2, P00_INV(2), 1, P00_INV(2), 0,)

/** @brief Determine of the argument list has a comma, i.e at least two arguments. */
#define P99_HAS_COMMA(...) P00_ARG(__VA_ARGS__,                \
 1, 1, 1, 1, 1, 1, 1,                                          \
 1, 1, 1, 1, 1, 1, 1, 1,                                       \
 1, 1, 1, 1, 1, 1, 1, 1,                                       \
 1, 1, 1, 1, 1, 1, 1, 1,                                       \
 1, 1, 1, 1, 1, 1, 1, 1,                                       \
 1, 1, 1, 1, 1, 1, 1, 1,                                       \
 1, 1, 1, 1, 1, 1, 1, 1,                                       \
 1, 1, 1, 1, 1, 1, 1, 1,                                       \
 1, 1, 1, 1, 1, 1, 1, 1,                                       \
 1, 1, 1, 1, 1, 1, 1, 1,                                       \
 1, 1, 1, 1, 1, 1, 1, 1,                                       \
 1, 1, 1, 1, 1, 1, 1, 1,                                       \
 1, 1, 1, 1, 1, 1, 1, 1,                                       \
 1, 1, 1, 1, 1, 1, 1, 1,                                       \
 1, 1, 1, 1, 1, 1, 1, 1,                                       \
 1, 1, 1, 1, 1, 1, 1, 1,                                       \
 1, 1, 1, 1, 1, 1, 1, 1,                                       \
 1, 1, 1, 1, 1, 1, 1, 1,                                       \
 1, 1, 1, 1, 1, 1, 1, 1,                                       \
 1, 1, 1, 1, 1, 1, 0, 0)

#define P00_PRE2(_0, ...) _0, P00_PRE1(__VA_ARGS__)
#define P00_PRE3(_0, ...) _0, P00_PRE2(__VA_ARGS__)
#define P00_PRE4(_0, ...) _0, P00_PRE3(__VA_ARGS__)
#define P00_PRE5(_0, ...) _0, P00_PRE4(__VA_ARGS__)
#define P00_PRE6(_0, ...) _0, P00_PRE5(__VA_ARGS__)
#define P00_PRE7(_0, ...) _0, P00_PRE6(__VA_ARGS__)
#define P00_PRE8(_0, ...) _0, P00_PRE7(__VA_ARGS__)
#define P00_PRE9(_0, ...) _0, P00_PRE8(__VA_ARGS__)
#define P00_PRE10(_0, ...) _0, P00_PRE9(__VA_ARGS__)


//
// Taken from p99_args.h
//

/**
 ** @brief Return the length of the variate argument list.
 **
 ** This supposes that the length is less than ::P99_MAX_NUMBER.
 **
 ** Idea is due to Laurent Deniau, CERN, and taken from a discussion
 ** in comp.lang.c.
 **
 ** @warning this also counts an empty argument list as having one (=
 ** the empty) argument
 ** @see P99_NARG for a macro that returns 0 if the list is empty
 **/
#define P00_NARG(...) P00_NARG_1(__VA_ARGS__)


#define P00_IS__EQ__(...) ,

/**
 ** @brief Test if the argument list is empty.
 **
 ** This expands to token 1 if the list was empty and to token 0 if
 ** there was anything other than a comment in the list.
 **
 ** The implementation of this macro is kind of tricky and relies heavily
 ** on the fact that a function macro (@c P00_IS__EQ__ in this case) is
 ** left untouched if it is not followed by a parenthesis. See
 ** http://gustedt.wordpress.com/2010/06/08/detect-empty-macro-arguments/
 **
 ** @return tokens 0 or 1
 **
 ** @warning This macro should work for most reasonable invocations
 ** (balanced parenthesis and stuff like that). The only case that
 ** definitely does not work is when called with another macro @c X
 ** at the end of its argument list, where X itself expects more than one
 ** argument.
 ** The particular cases where X receives @c 0, @c 1 or a
 ** variable number of arguments should be fine.
 **/
#define P99_IS_EMPTY(...)                                                 \
P00_ISEMPTY(                                                              \
            /* test if there is just one argument, that might be empty */ \
             P99_HAS_COMMA(__VA_ARGS__),                                  \
             /* test if P99_IS__EQ__ together with the argument           \
                adds a comma */                                           \
             P99_HAS_COMMA(P00_IS__EQ__ __VA_ARGS__),                     \
             /* test if the argument together with a parenthesis          \
                adds a comma */                                           \
             P99_HAS_COMMA(__VA_ARGS__ (/*empty*/)),                      \
             /* test if placing it between P99_IS__EQ__ and the           \
                parenthesis adds a comma */                               \
             P99_HAS_COMMA(P00_IS__EQ__ __VA_ARGS__ (/*empty*/))          \
             )

#define P00_ISEMPTY(_0, _1, _2, _3) P99_HAS_COMMA(P99_PASTE5(P00_IS_EMPTY_CASE_, _0, _1, _2, _3))
#define P00_IS_EMPTY_CASE_0000 P00_IS_EMPTY_CASE_0000
#define P00_IS_EMPTY_CASE_0001 ,
#define P00_IS_EMPTY_CASE_0010 P00_IS_EMPTY_CASE_0010
#define P00_IS_EMPTY_CASE_0011 P00_IS_EMPTY_CASE_0011
#define P00_IS_EMPTY_CASE_0100 P00_IS_EMPTY_CASE_0100
#define P00_IS_EMPTY_CASE_0101 P00_IS_EMPTY_CASE_0101
#define P00_IS_EMPTY_CASE_0110 P00_IS_EMPTY_CASE_0110
#define P00_IS_EMPTY_CASE_0111 P00_IS_EMPTY_CASE_0111
#define P00_IS_EMPTY_CASE_1000 P00_IS_EMPTY_CASE_1000
#define P00_IS_EMPTY_CASE_1001 P00_IS_EMPTY_CASE_1001
#define P00_IS_EMPTY_CASE_1010 P00_IS_EMPTY_CASE_1010
#define P00_IS_EMPTY_CASE_1011 P00_IS_EMPTY_CASE_1011
#define P00_IS_EMPTY_CASE_1100 P00_IS_EMPTY_CASE_1100
#define P00_IS_EMPTY_CASE_1101 P00_IS_EMPTY_CASE_1101
#define P00_IS_EMPTY_CASE_1110 P00_IS_EMPTY_CASE_1110
#define P00_IS_EMPTY_CASE_1111 P00_IS_EMPTY_CASE_1111


#define P00_NARG_EMPTY_1(VAL) 0
#define P00_NARG_EMPTY_0(VAL) VAL

/**
 ** @brief Return the length of the variable length argument list, where an empty
 ** argument list is considered to have 0 arguments.
 **
 ** This supposes that the length of the list is less than ::P99_MAX_NUMBER.
 **
 ** @see P00_NARG for a macro in which an empty list is considered to have 1 argument.
 **/
#define P99_NARG(...) P00_NARG__1(P99_IS_EMPTY(__VA_ARGS__), P00_NARG(__VA_ARGS__))
#define P00_NARG__1(B, VAL) P00_NARG__2(P99_PASTE2(P00_NARG_EMPTY_, B), VAL)
#define P00_NARG__2(B, VAL) B(VAL)


//
// Taken from p99_list.h
//

#define P00_PRE0(...)
#define P00_PRE1(_0, ...) _0

/**
 ** Cut the argument list at position @a N
 **/
#define P99_SELS(N, ...) P99_PASTE2(P00_PRE, N)(__VA_ARGS__)


#endif // GMOCK_P99_H_

load("@rules_cc//cc:defs.bzl", "cc_library")

# Library that defines the FRIEND_TEST macro.
cc_library(
    name = "prod",
    hdrs = [
        "include/gtest/gtest_prod.h",
    ],
    strip_include_prefix = "include",
    visibility = ["//visibility:public"],
)

# Google Test.
cc_library(
    name = "googletest",
    srcs = glob(
        include = [
            "src/*.cc",
            "src/*.h",
        ],
        exclude = [
            "src/gtest-all.cc",
            "src/gtest_main.cc",
        ],
    ),
    hdrs = glob([
        "include/**/*.h",
    ]),
    copts = select({
        "//:windows": [],
        "//conditions:default": ["-pthread"],
    }),
    defines = select({
        "//:has_absl": ["GTEST_HAS_ABSL=1"],
        "//conditions:default": [],
    }),
    features = select({
        "//:windows": ["windows_export_all_symbols"],
        "//conditions:default": [],
    }),
    linkopts = select({
        "//:windows": [],
        "//conditions:default": ["-pthread"],
    }),
    strip_include_prefix = "include",
    visibility = ["//visibility:public"],
    deps = select({
        "//:has_absl": [
            "@com_google_absl//absl/debugging:failure_signal_handler",
            "@com_google_absl//absl/debugging:stacktrace",
            "@com_google_absl//absl/debugging:symbolize",
            "@com_google_absl//absl/strings",
            "@com_google_absl//absl/types:optional",
            "@com_google_absl//absl/types:variant",
        ],
        "//conditions:default": [],
    }),
)

cc_library(
    name = "main",
    srcs = [
        "src/gtest_main.cc",
    ],
    features = select({
        "//:windows": ["windows_export_all_symbols"],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = [
        ":googletest",
    ],
)

cc_library(
    name = "internal_inl_h",
    testonly = True,
    hdrs = [
        "src/gtest-internal-inl.h",
    ],
    include_prefix = "src",
    strip_include_prefix = "src",
    visibility = [
        "//googlemock/test:__subpackages__",
        "//googletest/test:__subpackages__",
    ],
)
